## Broute Force Sol

class Solution {
public:
    vector<int> twoSum(vector<int>& arr, int target) {
        int n = arr.size();
        vector<int> ans;
        for(int i = 0 ; i < n ; i++){
            for(int j = i + 1 ; j < n ; j++){
                if(arr[i] + arr[j] == target) return {i , j};
            }
        }
        return {};
    }
};

## Another Two Pointer Approach (but we have to use pair and so on) -> https://www.youtube.com/watch?v=weENywNKxVA

class Solution {
public:
    vector<int> twoSum(vector<int>& arr, int target) {
        sort(arr.begin() , arr.end());
        int i = 0;
        int j = arr.size() - 1;
        while( i < j){
            int sum = arr[i] + arr[j];
            if(sum == target) return {i , j};
            else if( sum > target) j--;
            else i++;
        }
        return {};
    }
};

## Optimized Sol

class Solution {
public:
    vector<int> twoSum(vector<int>& arr, int target) {
        unordered_map<int , int> m;
        for(int i = 0 ; i < arr.size() ; i++){
            int complement = target - arr[i];
            if(m.find(complement) != m.end()){
                return {m[complement] , i};
            }
            m[arr[i]] = i;
        }
        return {};
    }
};
